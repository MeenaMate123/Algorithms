#include <vector>
#include <iostream>
#include <set>
#include <list>
#include <climits>
#include <stack>
#include <queue>

using namespace std;

class Edge
{
    public:
    int dest, weight;
    Edge(int x,int y)
    {
        dest=x;
        weight=y;
    }
};

int main()
{
    int num_of_v, num_of_e;
    cin >> num_of_v >> num_of_e;;
    vector<list<Edge> > adj_list(num_of_v);
    vector<int> Betweenness_Centrality(num_of_v,0);
    //vector<Edge> mst;
    for (int i = 0; i < num_of_e; ++i)
    {
        int x,y,w;
        cin >> x >> y >> w;
        adj_list[x].push_back(Edge{y, w});
        adj_list[y].push_back(Edge{x, w});
    }
    for (int source=0; source < num_of_v;source++)
    {
    	vector<list<int> > parent(num_of_v);
    	vector<int> distance(num_of_v,INT_MAX);
    	vector<int> path(num_of_v,0);
    	vector<int> dependency(num_of_v,0);
    	set<pair<int, int> > T;
    	set<int> A;
    	queue<int> reversepath;
    	distance[source] = 0;
    	path[source]=1;
    	T.insert(make_pair(0,source));
    	while (!T.empty())
    	{
    		int temp = T.begin()->second;
    		A.insert(temp);
    		T.erase(T.begin());
    		list<Edge> li=adj_list[temp];
    		for (list<Edge>::iterator i=li.begin();i!=li.end();i++)
    		{
    			if (A.count(i->dest) == 1)
    				continue;
    			int v=i->dest;
    			int weight = i->weight;
    			if (distance[v] > distance[temp]+weight)
    			{
    				if(distance[v]!=INT_MAX)
    					T.erase(T.find(make_pair(distance[v], v)));
    				distance[v] = distance[temp]+weight;
    				T.insert(make_pair(distance[v], v));
    				parent[v].push_back(temp);
    				path[v]=path[temp];
    			}
    			else if (distance[v] == distance[temp]+weight)
    			{
    				path[v]=path[v]+path[temp];
    				parent[v].push_back(temp);
    			}
    		}
    	}
    	/*for (int i=0;i<num_of_v;i++)
    	{
    		if(parent[i].empty() && i!=source)
    			path[i]=0;
    		cout<<path[i]<<" ";
    	}*/
    }
    return 0;
}
